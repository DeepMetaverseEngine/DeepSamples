<doc>
  <INCLUDE>csharp-base-define.xml</INCLUDE>
  <INCLUDE>csharp-orm-define.xml</INCLUDE>
<CODE_TEMPLATE>
// Warning: do not edit this file.
// 警告: 不要编辑此文件
<CLASS>
// <FILE_NAME/>
// <CLASS_NAME/>
</CLASS>
<CLASS>
using DeepCore;
using DeepCore.IO;
using DeepCore.ORM;
using DeepCrystal;
using DeepCrystal.ORM;
using DeepCrystal.ORM.Generic;
using DeepCrystal.Threading;
using System;
using System.Collections;
using System.Collections.Generic;

namespace <NAME_SPACE/>
{
    public class <CLASS_SHORT_NAME/>Mapping : MappingReference&lt;<CLASS_NAME/>&gt;
    {
        //------------------------------------------------------------------------------------------------------------------------
        #region Fields Declaration
<FIELDS IsAttribute="PersistFieldAttribute" NotNull="True" ><F_TYPE_DEFINE Method="DECLARE"/></FIELDS>
        #endregion
        //------------------------------------------------------------------------------------------------------------------------
        // region Fields Operations
<FIELDS IsAttribute="PersistFieldAttribute" NotNull="True" >
        /// &lt;summary&gt;自动刷新字段&lt;/summary&gt;
<F_TYPE_DEFINE Method="OP"/></FIELDS>
        //------------------------------------------------------------------------------------------------------------------------
        // region Fields Not Operations
<FIELDS NotAttribute="PersistFieldAttribute" NotNull="True" ><F_TYPE_DEFINE Method="NOP"/></FIELDS>
        //------------------------------------------------------------------------------------------------------------------------
        public <CLASS_SHORT_NAME/>Mapping(string key, ITaskExecutor svc, IMappingAdapter db = null) : base(key, svc, db) { }
        public <CLASS_SHORT_NAME/>Mapping(string typeName, string key, ITaskExecutor svc, IMappingAdapter db = null) : base(typeName, key, svc, db) { }
        protected override MappingObject CreateSubMapping(string fieldName, Type fieldType)
        {
            return <CODE_NAME_SPACE/>.AutoMappingConverter.AutoInstance.CreateSubMapping(this, fieldName, fieldType);
        }
        protected override void OnDataTypeChanged(Type type)
        {
            base.OnDataTypeChanged(type);
<FIELDS IsAttribute="PersistFieldAttribute"  NotNull="True"><F_TYPE_DEFINE Method="INIT"/></FIELDS>
        }
    }
}
</CLASS>
</CODE_TEMPLATE>

</doc>