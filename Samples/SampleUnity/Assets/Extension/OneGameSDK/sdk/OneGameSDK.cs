// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
//  skd接口类
//
//  在使用 登录 登出 购买 等之类接口前 请务必设置平台所需参数
//  使用例子：

//  当前sdk当成功更新，登录，登出，支付后 都会发送消息
//  接受消息的例子请看demo
//  消息会发出一个 Typeeventdata的对象 其中的data 当在登录时，是Typelogindata
//					     当在支付后 是 Typepayresultdata
//
//使用的例子：
//		OneGameSDK.Instance.platformData.appID = 4597;
//		OneGameSDK.Instance.platformData.appKey = "07c05293112bf3c4d090ebc330044ed0";
//		OneGameSDK.Instance.platformData.evtDelegate +=NotifyTypeLogin;
//		OneGameSDK.Instance.platformData.IsOpenRecharge = true;
//
//
//OneGameSDK.Instance.platformData.evtDelegate +=NotifyTypeLogin;//添加事件侦听
//void NotifyTypeLogin(SDKTypeEvent evt)
//	{
//		System.Console.WriteLine ("notify event type " + evt.evtType);
//		if(evt!=null && evt.evtType == SDKEventType.EVENT_LOGIN_SUCCESS)
//		{
//			System.Console.WriteLine("success notify degele do login success");
//			U3DTypePayData payData = new U3DTypePayData ();
//			payData.realPrice = 2;
//			OneGameSDK.Instance.U3D_TypeSDKBuyItem (payData);
//			OneGameSDK.Instance.U3D_TypeSDKShowPersonCenter();
//		}
//	}
//
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Xml;
using SLua;
using OneGameSDKTool;
using Assets.Scripts.Setting;
using System.IO;

public class OneGameSDK : Notification

{
	private static volatile OneGameSDK _instance; 
	private static object syncRoot = new object(); 
	private static  GameObject _container;

	//private volatile SDKBaseData _userData=null;
	private Dictionary<SDKEventType,U3DTypeEventDelegate>	_delegateDic;
    private bool isInitSelf = false;
    private Action<int> payCallback = null;
    private Action<string> albumCallback = null;
    private Action<string, string> uploadCallback = null;
    private static string serializerFormat = "{0}-order.db";

    private SdkInterface sdkInterface = new SdkInterface();


    private OneGameSDK():base()
	{

	}

    [RuntimeInitializeOnLoadMethod]
    static void InitSelf()
    {
        _container = new GameObject(SDKTypeDefine.NOTIFY_CLASS)
        {
            hideFlags = HideFlags.HideInHierarchy
        };
        UnityEngine.Object.DontDestroyOnLoad(_container);
        _instance = _container.AddComponent<OneGameSDK>();
        _instance._delegateDic = new Dictionary<SDKEventType, U3DTypeEventDelegate>();
        _instance.InitSDK();
    }
    public static OneGameSDK Instance
    {
        get
        {
            return _instance;
        }
    }

    public int AppId
    {
        get
        {
            return sdkInterface.GetAppId();
        }
    }

    public int Channel
    {
        get
        {
            return sdkInterface.GetChannel();
        }
    }

    public int PlatformID
    {
        get
        {
            return GetPlatformData().GetInt(SDKAttName.PLATFORM_ID);
        }
    }

    public void InitSDK()
	{
        OneGameEventListener.Instance.InitSelf();
		_instance.selfInit();

    }

    public SDKBaseData GetUserData()
	{
		return sdkInterface.GetUserData();
	}
	public SDKBaseData GetPlatformData()
	{
		return sdkInterface.GetPlatformData();
	}
	//显示登录平台的方法
	public void Login(bool isAutoLogin)
	{
		//if has not self init return and wait receive update event
		if(!selfInit ())
		{
			Debug.Log("has not self init");
			return ;
		}
        sdkInterface.ShowLogin(isAutoLogin);

        //自定义事件发起登录
        if (!PlayerPrefs.HasKey(SDKAttName.CUSTOM_EVENT_ONE_CALL_LOGIN))
        {
            var eEvent = new SDKBaseData();
            eEvent.SetData(SDKAttName.CUSTOM_EVENT_NAME, SDKAttName.CUSTOM_EVENT_ONE_CALL_LOGIN);
            OneGameSDK.Instance.DoAnyFunction(SDKAttName.CUSTOM_EVENT, eEvent);
            PlayerPrefs.SetInt(SDKAttName.CUSTOM_EVENT_ONE_CALL_LOGIN, 1);
        }

    }
    //腾讯登录方式，loginType:1为QQ登录，2为微信登录
    public void Login(string loginType) {
        if (!selfInit())
        {
            Debug.Log("has not self init");
            return;
        }
    }
	//登出平台
	public  void Logout()
	{
        sdkInterface.ShowLogout();
	}

    /// <summary>
    /// 切换账号
    /// </summary>
    public void SwitchAccount()
    {
        sdkInterface.SwitchAccount();
    }

	public int  LoginState()
	{
		return sdkInterface.LoginState();

	}

    public void SaveOrder(string roleID, string orderID)
    {
        var list = GetOrderList(roleID);
        if (!list.Contains(orderID))
        {
            list.Add(orderID);
            PersistenceData.Save<List<string>>(string.Format(serializerFormat,roleID), list);
        }
    }

    public void RemoveOrder(string roleID, string orderID)
    {
        var list = GetOrderList(roleID);
        if (list.Contains(orderID))
        {
            list.Remove(orderID);
            PersistenceData.Save<List<string>>(string.Format(serializerFormat, roleID), list);
        }
    }

    public List<string> GetOrderList(string roleID)
    {
        return PersistenceData.Load<List<object>>(string.Format(serializerFormat, roleID)).ToGenericList<string>();
    }

    public void Pay(LuaTable _in_pay, System.Action<int> callback)
    {
	    payCallback = callback;
        Dictionary<string, object> payData = GameUtil.LuaTableToDictionary(_in_pay);
        PayItem(new SDKBaseData(payData));
        
    }

    /**
	 * eg:
	 * 		payData.SetData(SDKAttName.REAL_PRICE,"100");
			payData.SetData(SDKAttName.ITEM_NAME,"sk bi");
			payData.SetData(SDKAttName.ITEM_DESC,"desc");
			payData.SetData(SDKAttName.ITEM_COUNT,"1");
			payData.SetData(SDKAttName.ITEM_SEVER_ID,"id");
			payData.SetData(SDKAttName.SEVER_ID,"1");
			payData.SetData(SDKAttName.EXTRA,"extra");
			
	 * 支付函数
	 * @param _in_pay pay object 支付对象的结构体 若至少传入 一个 价格 
	 * 
	 * @return bill number
	 */
    public void PayItem(SDKBaseData _in_pay)
	{
        Debug.Log("U3D_Type sdk buy item");
		sdkInterface.PayItem(_in_pay);
	}
	//显示用户中心
	public void ShowPersonCenter()
    { 
        sdkInterface.ShowUserCenter();
	}
	//隐藏用户中心（若平台sdk存在该方法）
	public void HidePersonCenter()
	{
        sdkInterface.HideUserCenter();
	}
	public void ShowToolBar()
	{
        sdkInterface.ShowToolBar();
	}
	public void HideToolbar()
	{
        sdkInterface.HideToolBar();
	}


	public void UpdatePlayerInfo()
	{
		SDKBaseData cacheUser = GetUserData();
        sdkInterface.SetPlayerInfo(cacheUser);
	}
	public void ShowShare(SDKBaseData _in_data)
	{
        sdkInterface.ShowShare(_in_data);
	}
	public void CallCopyClipboard(SDKBaseData _in_data)
	{
        sdkInterface.CopyClipboard(_in_data);
	}
	public bool IsHasRequest(String requestType)
	{
		return sdkInterface.IsHasRequest(requestType);
	}
	public void Destory()
	{
        sdkInterface.Destory();
	}
	public void ExitGame()
	{
        sdkInterface.ExitGame();
	}
	public void DoAnyFunction(string _func_name,SDKBaseData _in_data)
	{
        sdkInterface.DoAnyFunction(_func_name,_in_data);
	}
	public string DoPhoneInfo()
	{
		return sdkInterface.DoPhoneInfo ();
	}
	public void AddLocalPush(SDKBaseData _pushData)
	{
		Debug.Log("AddLocalPush in u3dType sdk : "+ _pushData.DataToString());

        sdkInterface.AddLocalPush (_pushData);
	}
	public void RemoveLocalPush(string pushid)
	{
        sdkInterface.RemoveLocalPush (pushid);
	}
    public void RemoveAllLocalPush()
	{
        sdkInterface.RemoveAllLocalPush ();
	}
	public void GetUserFriends()
	{
        sdkInterface.GetUserFriends ();
	}

    /// <summary>
    /// 创建临时cos令牌
    /// </summary>
    /// <param name="tmpSecretId"></param>
    /// <param name="tmpSecretKey"></param>
    /// <param name="sessionToken"></param>
    /// <param name="beginTime"></param>
    /// <param name="expiredTime"></param>
    public void CreateCredentialProvider(String appId, String region, String bucket, String tmpSecretId, String tmpSecretKey, String sessionToken, long beginTime, long expiredTime)
    {
        sdkInterface.CreateCredentialProvider(appId, region, bucket, tmpSecretId, tmpSecretKey, sessionToken, beginTime, expiredTime);
    }

    /// <summary>
    /// 上传图片
    /// </summary>
    /// <param name="filePath">图片绝对路径</param>
    /// <param name="callback">param1=success成功/failed失败 param2=原因描述</param>
    public void Upload(String filePath,String cosPath, Action<string,string> callback)
    {
        uploadCallback = callback;
        sdkInterface.Upload(filePath, cosPath);
    }

    /// <summary>
    /// 取消上传
    /// </summary>
    public void Cancel()
    {
        sdkInterface.Cancel();
    }

    /// <summary>
    /// 打开内置相册
    /// </summary>
    /// <param name="title">相册标题</param>
    /// <param name="aspectX">X轴缩放比例</param>
    /// <param name="aspectY">Y轴缩放比例</param>
    /// <param name="callback">上传的回调 ""=失败 "-1"=取消 其他情况为成功返回图片路径字符串</param>
    public void OpenAlbum(String title,int aspectX, int aspectY, Action<string> callback)
    {
        albumCallback = callback;
        sdkInterface.OpenAlbum(title, aspectX, aspectY);
    }

    /////////////////private functions ///////




    private bool selfInit()
	{
        AddEventDelegate(SDKEventType.EVENT_PAY_RESULT, NotifyPayResult);

        AddEventDelegate(SDKEventType.Event_EXTRA_FUNCTION, NotifyExtraFunction);

        if (UnityEngine.Debug.isDebugBuild)
        {
            BuglyAgent.ConfigDebugMode(true);
        }else
        {
            BuglyAgent.ConfigDebugMode(false);
        }
			
        var buglyId = OneGameSDK.Instance.GetPlatformData().GetData(SDKAttName.BUGLY_ID);
        if(string.IsNullOrEmpty(buglyId))
        {
            buglyId = GameConfig.Instance.GetString(SDKAttName.BUGLY_ID);
        }
        BuglyAgent.InitWithAppId(buglyId);

        BuglyAgent.EnableExceptionHandler();

        if (isInitSelf) return true;
		isInitSelf = true;

        sdkInterface.InitSDK();


        return false;
	}

    void NotifyPayResult(SDKTypeEvent evt)
    {
        var result = evt.evtData.GetInt(SDKAttName.PAY_RESULT);

        if (payCallback != null)
        {
            payCallback(result);
            payCallback = null;
        }
    }

    //额外功能通知回调
    void NotifyExtraFunction(SDKTypeEvent evt)
    {
        Debug.Log("Received NotifyExtraFunction " + evt.evtData.DataToString());

        if (evt.evtData.GetData("extra_msg_type") == "album_pick")
        {
            if(albumCallback != null)
            {
                albumCallback(evt.evtData.GetData("filePath"));
                albumCallback = null;
            }
        }else if(evt.evtData.GetData("extra_msg_type") == "cos_upload")
        {
            if (uploadCallback != null)
            {
                uploadCallback(evt.evtData.GetData("result"), evt.evtData.GetData("desc"));
                uploadCallback = null;
            }
        }
    }

    public void AddEventDelegate(SDKEventType _in_type,U3DTypeEventDelegate _in_delegate)
	{

		if( !_delegateDic.ContainsKey(_in_type))
		{
			_delegateDic.Add(_in_type,_in_delegate);
			return;
		}
		else
		{
			U3DTypeEventDelegate cacheDelegate = _delegateDic[_in_type];
			cacheDelegate+=_in_delegate;
		}
		Debug.Log("success add degelet ");
	}
	public void RemoveEventDelegate(SDKEventType _in_type)
	{
		if( _delegateDic.ContainsKey(_in_type))
		{
			_delegateDic.Remove(_in_type);
		}
	}


	public void SendEvent(SDKEventType _in_type,SDKBaseData _in_data )
	{

		SDKTypeEvent evt = new SDKTypeEvent (_in_type,_in_data);

		if(null!=_in_data)
			Debug.Log(">>>>send event<<<<< type "+ _in_type + "data" + _in_data.DataToString());
		else
			Debug.Log(">>>>send event<<<<< type "+ _in_type + "null data" );


		Debug.Log("delegate dic start");
		if(_delegateDic.ContainsKey(_in_type))
		{
			if(_delegateDic[_in_type]!=null)
			{
                Debug.Log("find delegate " + _delegateDic[_in_type].ToString());
				U3DTypeEventDelegate _delegate = _delegateDic[_in_type];
				_delegate(evt);
//				_delegateDic[_in_type](evt);
			}
		}
		else
		{
			Debug.Log("dic didnot has key");
		}
	}


	public void SendEvent(SDKEventType _in_type)
	{
		SendEvent (_in_type, new SDKBaseData());
	}
}

